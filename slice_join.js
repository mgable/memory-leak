// Generated by CoffeeScript 1.10.0
(function() {
  const memwatch = require('memwatch-next');
const heapdump = require('heapdump');

  var ALPHABET, N, SMALL_STRINGS, getSlice, largeString, nextTick, processParts, randomString;

  ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

  if (typeof window === "undefined" || window === null) {
    nextTick = setImmediate;
  } else {
    nextTick = window.nextTick;
  }

  randomString = function(len) {
    var a, i;
    a = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(ALPHABET[parseInt(Math.random() * 26)]);
      }
      return results;
    })();
    return a.join('');
  };

  largeString = function() {
    var a, i, j, s1, s2;
    s1 = randomString(10000);
    s2 = randomString(10000);
    a = [];
    for (i = j = 0; j < 500; i = ++j) {
      a.push(s1);
      a.push(s2);
    }
    return a.join('');
  };

  SMALL_STRINGS = [];

  if (typeof window !== "undefined" && window !== null) {
    window.SMALL_STRINGS = SMALL_STRINGS;
  }

  N = 0;

    write = function (){
    heapdump.writeSnapshot((err, filename) => {
      if (err) console.error(err);
      else console.error('Wrote snapshot: ' + filename);
    });
  };

  getSlice = function(large) {
    var n, s;
    n = Math.random() * (large.length - 500);
    s = large.substr(n, 500);
    return SMALL_STRINGS.push((s.split('')).join(''));
  };

  processParts = function() {
    var i, j, large;
    large = largeString();
    for (i = j = 0; j < 10; i = ++j) {
      getSlice(large);
    }
    N++;
    console.log("cycles: " + N + ", strings: " + SMALL_STRINGS.length);

    if(N === 144){
      console.info("I am writing");
      write();
    }

    return nextTick(processParts);
  };

  processParts();

}).call(this);